<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta
      name="description"
      content="nossl.sh helps you diagnose no SSL connection issues, check your Wi-Fi, verify internet access, troubleshoot captive portal login pages, and inspect the headers your device sends."
    />
    <meta
      name="keywords"
      content="no ssl, nossl, never ssl alternative, captive portal login, hotel wifi login, airport wifi, coffee shop wifi, http test page"
    />
    <title>nossl.sh - Connection &amp; Header Diagnostics</title>
    <link rel="icon" href="/favicon.ico" type="image/svg+xml" />
    <link rel="stylesheet" href="/static/styles.css" />
  </head>
  <body>
    <header class="hero">
      <div class="container">
        <h1>nossl.sh</h1>
        <div class="hero-copy">
          <p class="hero-subtitle">
            A simple diagnostic page inspired by NeverSSL for quick connection checks when you're
            stuck on a captive portal or seeing no SSL warnings.
          </p>
          <p class="hero-description">
            Launch this HTTP-only landing page when a splash screen refuses to appear so you can quickly
            confirm whether the network is blocking encrypted traffic.
          </p>
          <ul class="hero-scenarios">
            <li>Hotel Wi-Fi</li>
            <li>Airport hotspots</li>
            <li>Library networks</li>
            <li>Campus internet</li>
            <li>Coffee shop access points</li>
          </ul>
        </div>
      </div>
    </header>

    <main class="container">
      <section aria-labelledby="connection-info" class="connection-info">
        <h2 id="connection-info">Connection Details</h2>
        <div class="connection-info__content">
          <div class="connection-info__status">
            <p class="status <%= scheme === 'https' ? 'secure' : 'insecure' %>">
              <%= status %>
            </p>
            <p>
              Your request reached us using the
              <strong><%= scheme.toUpperCase() %></strong> protocol.
            </p>
          </div>
          <div class="connection-info__ip">
            <span class="ip-label">Your IP Address</span>
            <p class="ip"><%= clientIp %></p>
          </div>
        </div>
        <dl class="connection-info__meta">
          <div>
            <dt>Page generated</dt>
            <dd><%= generatedAt.toISOString().replace('T', ' ').replace(/\..+/, ' UTC') %></dd>
          </div>
          <div>
            <dt>API response timestamp</dt>
            <dd data-api-timestamp>Loading…</dd>
          </div>
          <div>
            <dt>API latency</dt>
            <dd data-api-latency aria-live="polite">Measuring…</dd>
          </div>
        </div>
      </section>

      <section aria-labelledby="usage-tips" class="usage">
        <h2 id="usage-tips">How to use nossl.sh</h2>
        <p>
          Copy the code below to try a quick <code>curl</code> request and confirm that your device can
          reach the open <strong>http://nossl.sh</strong> site without SSL:
        </p>
        <pre><code>curl -v http://nossl.sh</code></pre>
      </section>

      <section aria-labelledby="request-headers" class="request-headers">
        <h2 id="request-headers">Request Headers</h2>
        <p>We received the following headers from your client:</p>
        <div class="table-wrapper">
          <table>
            <thead>
              <tr>
                <th scope="col">Header</th>
                <th scope="col">Value</th>
              </tr>
            </thead>
            <tbody>
              <% headers.forEach(([key, value]) => { %>
              <tr>
                <th scope="row"><%= key %></th>
                <td><%= value %></td>
              </tr>
              <% }) %>
            </tbody>
          </table>
        </div>
      </section>

      <section aria-labelledby="usage-information" class="usage">
        <h2 id="usage-information">Usage information</h2>
        <p>
          If the page still won't load, double-check your Wi-Fi connection, make sure your internet
          service is working, and try disabling any VPN or custom DNS temporarily.
        </p>
        <p>
          Many captive portal detection workflows look for a plain HTTP page like NeverSSL. You can
          use nossl.sh as a reliable fallback when automatic login prompts fail, when browsers keep
          showing certificate errors, or when you need an easy URL to remember for "no ssl" testing.
        </p>
        <p>
          People often search for phrases like "NeverSSL login", "open Wi-Fi sign in", "bypass HTTPS
          captive portal", "hotel Wi-Fi won't load", or "airport Wi-Fi redirect page". This site is
          designed to answer those queries by providing a fast-loading, SSL-free diagnostic page that
          makes captive portal login screens reappear.
        </p>
        <p>
          Bookmark nossl.sh to resolve issues with smart TVs, game consoles, streaming boxes, and other
          devices that cannot complete an HTTPS handshake on restricted networks.
        </p>
      </section>
    </main>

    <footer>
      <div class="container">
        <p>Page generated at <%= generatedAt.toISOString().replace('T', ' ').replace(/\..+/, ' UTC') %>.</p>
        <p>
          Prefer JSON? Try the
          <a href="/api/request-info" rel="nofollow">request info API endpoint</a>.
        </p>
      </div>
    </footer>
    <script>
      const formatUtc = (timestamp) => {
        try {
          const date = new Date(timestamp);
          if (Number.isNaN(date.getTime())) {
            return timestamp;
          }
          return date.toISOString().replace('T', ' ').replace(/\..+/, ' UTC');
        } catch (error) {
          return timestamp;
        }
      };

      const latencyEl = document.querySelector('[data-api-latency]');
      const timestampEl = document.querySelector('[data-api-timestamp]');

      if (latencyEl && timestampEl) {
        const startedAt = performance.now();
        fetch('/api/request-info', { headers: { Accept: 'application/json' } })
          .then((response) => {
            const elapsed = Math.round(performance.now() - startedAt);
            latencyEl.textContent = `${elapsed} ms`;

            if (!response.ok) {
              throw new Error('Response not OK');
            }

            return response.json();
          })
          .then((data) => {
            timestampEl.textContent = formatUtc(data.timestamp);
          })
          .catch(() => {
            latencyEl.textContent = 'Unable to measure';
            timestampEl.textContent = 'Unavailable';
          });
      }
    </script>
  </body>
</html>

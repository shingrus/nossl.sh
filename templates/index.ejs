<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta
      name="description"
      content="nossl.sh helps you diagnose no SSL connection issues, check your Wi-Fi, verify internet access, troubleshoot captive portal login pages, and inspect the headers your device sends."
    />
    <meta
      name="keywords"
      content="no ssl, nossl, never ssl alternative, captive portal login, hotel wifi login, airport wifi, coffee shop wifi, http test page"
    />
    <meta property="og:title" content="nossl.sh - Connection &amp; Header Diagnostics" />
    <meta
            property="og:description"
            content="nossl.sh helps you diagnose no SSL connection issues, check your Wi-Fi, verify internet access, troubleshoot captive portal login pages, and inspect the headers your device sends."
    />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="http://nossl.sh/" />
    <meta property="og:site_name" content="nossl.sh" />
    <meta property="og:image" content="/static/og-image.png" />
    <meta property="og:image:alt" content="Abstract teal and navy banner for nossl.sh" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="nossl.sh - Connection &amp; Header Diagnostics" />
    <meta
            name="twitter:description"
            content="nossl.sh helps you diagnose no SSL connection issues, check your Wi-Fi, verify internet access, troubleshoot captive portal login pages, and inspect the headers your device sends."
    />
    <meta name="twitter:image" content="/static/og-image.png" />
    <meta name="twitter:image:alt" content="Abstract teal and navy banner for nossl.sh" />
    <title>nossl.sh - Connection &amp; Header Diagnostics</title>
    <link rel="icon" href="/favicon.ico" type="image/svg+xml" />
    <link rel="stylesheet" href="/static/styles.css" />
  </head>
  <body>
    <header class="top-bar">
      <div class="container top-bar__inner">
        <div class="branding" role="banner">
          <span class="logo" aria-hidden="true">●</span>
          <div class="branding__copy">
            <span class="brand-name">nossl.sh</span>
            <span class="brand-status">You're online</span>
          </div>
        </div>
        <p class="top-bar__hint">Plain HTTP diagnostics for captive portals &amp; restricted networks</p>
      </div>
    </header>

    <main class="container dashboard">
      <section aria-labelledby="connection-info" class="panel panel--connection">
        <header class="panel__header">
          <h2 id="connection-info">Connection snapshot</h2>
          <span class="status <%= scheme === 'https' ? 'secure' : 'insecure' %>">
            <%= status %>
          </span>
        </header>

        <p class="panel__summary">
          Request served over <strong><%= scheme.toUpperCase() %></strong>. These numbers refresh each time you load the page.
        </p>

        <dl class="connection-grid">
          <div>
            <dt>Connection type</dt>
            <dd><%= scheme.toUpperCase() %></dd>
          </div>
          <div>
            <dt>Client IP</dt>
            <dd class="mono"><%= clientIp %></dd>
          </div>
          <div>
            <dt>Page timestamp</dt>
            <dd class="mono"><%= generatedAt.toISOString().replace('T', ' ').replace(/\..+/, ' UTC') %></dd>
          </div>
          <div>
            <dt>Ping time</dt>
            <dd class="mono" data-api-latency aria-live="polite">Measuring…</dd>
          </div>
        </dl>
        <div class="connection-tools">
          <div class="headers-widget">
            <button type="button" class="pill" data-open-headers>Request headers JSON</button>
            <p class="pill__hint">Peek at the headers we saw and copy them for debugging.</p>
          </div>

          <div class="curl-card" data-curl-card>
            <header>
              <h3>curl snapshots</h3>
              <p>Your IP is the only thing exposed by the basic curl call.</p>
            </header>
            <div class="code-snippet" data-curl-command="curl http://nossl.sh">
              <button
                type="button"
                class="copy copy--snippet"
                data-copy-command
                aria-label="Copy curl command"
              >
                Copy
              </button>
              <pre><code>curl http://nossl.sh</code></pre>
            </div>
            <p class="pill__hint">Need the JSON payload? Hit the diagnostics endpoint below.</p>
            <div class="code-snippet" data-curl-command="curl http://nossl.sh/api/request-info">
              <button
                type="button"
                class="copy copy--snippet"
                data-copy-command
                aria-label="Copy curl command for API"
              >
                Copy
              </button>
              <pre><code>curl http://nossl.sh/api/request-info</code></pre>
            </div>
          </div>
        </div>
      </section>

      <section aria-labelledby="ascii-art" class="panel panel--ascii" role="presentation">
        <header class="panel__header">
          <h2 id="ascii-art" class="visually-hidden">nossl.sh ASCII wordmark</h2>
        </header>
        <pre aria-hidden="true">
┌─────────────────────────────┐
│  _   _ _____ _____ _        │
│ | | | |  _  /  ___| |       │
│ | |_| | | | \ `--.| |_ ___  │
│ |  _  | | | |`--. \ __/ _ \ │
│ | | | \ \_/ /\__/ / ||  __/ │
│ \_| |_/\___/\____/ \__\___| │
│                             │
│      http://nossl.sh        │
└─────────────────────────────┘
        </pre>
      </section>

      <section aria-labelledby="usage-information" class="panel panel--support">
        <header class="panel__header">
          <h2 id="usage-information">Why this page exists</h2>
        </header>
        <div class="panel__body">
          <p>
            Inspired by NeverSSL, nossl.sh is a quick diagnostic checkpoint when captive portals or restrictive firewalls block
            HTTPS handshakes. Load this page to trigger splash screens and inspect what your device sends.
          </p>
          <p>
            Still stuck? Confirm your Wi-Fi link, temporarily disable VPNs, or retry after clearing custom DNS profiles.
          </p>
          <p>
            Keep this URL handy for smart TVs, consoles, or travel routers that need an HTTP-only landing page to finish login
            flows.
          </p>
        </div>
      </section>
    </main>

    <footer>
      <div class="container">
        <p>Page generated at <%= generatedAt.toISOString().replace('T', ' ').replace(/\..+/, ' UTC') %>.</p>
        <p>
          Prefer JSON? Try the
          <a href="/api/request-info" rel="nofollow">request info API endpoint</a>.
        </p>
      </div>
    </footer>
    <div class="modal" data-headers-modal hidden>
      <div class="modal__overlay" data-close-headers></div>
      <div class="modal__content" role="dialog" aria-modal="true" aria-labelledby="headers-modal-title">
        <header class="modal__header">
          <h2 id="headers-modal-title">Request headers</h2>
          <button type="button" class="modal__close" data-close-headers aria-label="Close headers view">×</button>
        </header>
        <p class="modal__summary">Full JSON export of the headers we received from your device.</p>
        <div class="modal__actions">
          <button type="button" class="copy" data-copy-headers>Copy JSON</button>
        </div>
        <pre class="modal__body" data-headers-json></pre>
      </div>
    </div>
    <script>
      const latencyEl = document.querySelector('[data-api-latency]');
      const openHeadersButton = document.querySelector('[data-open-headers]');
      const headersModal = document.querySelector('[data-headers-modal]');
      const headersCopyButton = document.querySelector('[data-copy-headers]');
      const headerJsonBlock = document.querySelector('[data-headers-json]');
      const curlCommandButtons = document.querySelectorAll('[data-copy-command]');

      if (latencyEl) {
        const startedAt = performance.now();
        fetch('/api/request-info', { headers: { Accept: 'application/json' } })
          .then((response) => {
            const elapsed = Math.round(performance.now() - startedAt);
            latencyEl.textContent = `${elapsed} ms`;

            if (!response.ok) {
              throw new Error('Response not OK');
            }
          })
          .catch(() => {
            latencyEl.textContent = 'Unable to measure';
          });
      }

      const fallbackCopyText = (text) => {
        const textarea = document.createElement('textarea');
        textarea.value = text;
        textarea.setAttribute('readonly', '');
        textarea.style.position = 'absolute';
        textarea.style.left = '-9999px';
        document.body.appendChild(textarea);

        const selection = window.getSelection();
        if (selection && selection.rangeCount) {
          selection.removeAllRanges();
        }

        textarea.select();

        let successful = false;
        try {
          successful = document.execCommand('copy');
        } catch (error) {
          successful = false;
        }

        document.body.removeChild(textarea);
        return successful;
      };

      const copyText = async (text) => {
        if (navigator.clipboard && typeof navigator.clipboard.writeText === 'function') {
          try {
            await navigator.clipboard.writeText(text);
            return true;
          } catch (error) {
            // fall back to execCommand
          }
        }

        return fallbackCopyText(text);
      };

      const headerPairs = <%- JSON.stringify(headers) %>;
      const headersPayload = headerPairs.reduce((acc, [key, value]) => {
        if (acc[key]) {
          acc[key] = Array.isArray(acc[key]) ? [...acc[key], value] : [acc[key], value];
        } else {
          acc[key] = value;
        }
        return acc;
      }, {});

      if (headerJsonBlock) {
        headerJsonBlock.textContent = JSON.stringify(headersPayload, null, 2);
      }

      const toggleModal = (show) => {
        if (!headersModal) return;
        if (show) {
          headersModal.removeAttribute('hidden');
          document.body.classList.add('modal-open');
        } else {
          headersModal.setAttribute('hidden', '');
          document.body.classList.remove('modal-open');
        }
      };

      openHeadersButton?.addEventListener('click', () => toggleModal(true));

      headersModal?.addEventListener('click', (event) => {
        if ((event.target instanceof Element) && event.target.hasAttribute('data-close-headers')) {
          toggleModal(false);
        }
      });

      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && headersModal && !headersModal.hasAttribute('hidden')) {
          toggleModal(false);
        }
      });

      headersCopyButton?.addEventListener('click', async () => {
        const copied = await copyText(JSON.stringify(headersPayload, null, 2));
        headersCopyButton.textContent = copied ? 'Copied!' : 'Copy failed';
        setTimeout(() => {
          headersCopyButton.textContent = 'Copy JSON';
        }, 2000);
      });

      curlCommandButtons.forEach((button) => {
        button.addEventListener('click', async (event) => {
          const trigger = event.currentTarget;
          if (!(trigger instanceof HTMLElement)) return;
          const wrapper = trigger.closest('[data-curl-command]');
          const command = wrapper?.getAttribute('data-curl-command') || '';
          const copied = await copyText(command);
          trigger.textContent = copied ? 'Copied!' : 'Copy failed';
          setTimeout(() => {
            trigger.textContent = 'Copy';
          }, 2000);
        });
      });
    </script>
  </body>
</html>
